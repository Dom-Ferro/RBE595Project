#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

# This function is executed once at init time
function init() {
	
	T = 100
	k = 0.4
	
	GREEN = 1
	BLUE = 0
	# give a seed or all the robots pick the same random number
	math.rng.setseed(id)
	c = math.rng.uniform(0,100)

	# no magic numbers
	base_speed = 7.5
	turning_mod = 0.5
	lin_mod = 0.1
	colliding = 0
	vision = 120.0 #cm
	e = 5000
	goal_x = 2.5
	goal_y = -2.5
	NUM_ROBOTS = 30

	#grid things
	bb_dist = 30.0
	gg_dist = 40.0 
	bg_dist = 50.0
	gb_dist = 75.0

	blue = swarm.create(1) # swarm 0
	green = swarm.create(2) # swarm 1
	
	blue.select(id % 10 > 4)
	green.select(id % 10 <= 4)

	if (blue.in())
		set_leds(0,0,255)
	else
		set_leds(0,255,0)

	turn = 0

	same_neighbors = {} # neighbors.kin()
	non_same = {} # neighbors.nonkin()
 	friends = {}
	switch_count = 0
	switch_thresh = 200
	listener()

	happiness = 100.0
	happy_thresh = 3.0
	position = {
		.0 = pose.position.x,
		.1 = pose.position.y
	}

	angle_offset = 90.0
	alpha_attract = 1.01
	alpha_repulse = 0.7
	
	count = 0
	goal_mod = 100000000.0

}

# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {
	if (count > 500){
		goal_x = 0
		goal_y = 0
		goal_mod = 100000.0
	}
	same_neighbors = get_kin() # neighbors.kin()
	non_same = get_nonkin() # neighbors.nonkin()
	#log(non_same)	
	count = count + 1
		
	green.exec(function(){
		neighbors.broadcast(string.tostring(id),  GREEN)})
	blue.exec(function(){
		neighbors.broadcast(string.tostring(id),  BLUE)})

	vec = {}
	vec.x = 0.0
	vec.y = 0.0
	
	turn = turn + 1
	turn = turn % NUM_ROBOTS

	same_dist = bg_dist
	if (green.in())
		same_dist = gb_dist

	#calculate the vectors for the attraction/repulsion
	non_same.foreach(function(rid,data) {
		#log(neighbors.poses[rid])
		x = math.cos(data.azimuth)*F(data.distance, bg_dist, vision, alpha_attract, alpha_repulse)
		y = math.sin(data.azimuth)*F(data.distance, bg_dist, vision, alpha_attract, alpha_repulse)

		vec.x = vec.x + x
		vec.y = vec.y + y
	})
	
	same_dist = bb_dist
	if (green.in())
		same_dist = gg_dist

	same_neighbors.foreach(function(rid,data) {

		if (blue.in()){
			x = math.cos(data.azimuth)*F(data.distance, same_dist, vision, 1.1, alpha_repulse)
			y = math.sin(data.azimuth)*F(data.distance, same_dist, vision, 1.1, alpha_repulse)
		}
		else{
			x = math.cos(data.azimuth)*F(data.distance, same_dist, vision, 1.0001, alpha_repulse)
			y = math.sin(data.azimuth)*F(data.distance, same_dist, vision, 1.0001, alpha_repulse)
		}

		vec.x = vec.x + x
		vec.y = vec.y + y
	})

	happiness = calc_happy(vec) #math.abs(vec.x) + math.abs(vec.y)
	#calc_happy(vec)#, same_neighbors, non_same)

	if (happiness < happy_thresh) {
		debug.print(":-D")
	}
	else {
		debug.print(":-(")
	}
	#debug.print(happiness)

	position = {
		.0 = pose.position.x,
		.1 = pose.position.y
	}
	#debug.print(happiness)

	desire = 0.0
	if (green.in()){
		desire = 200.0 + count%300
		goal_vec_x = float(F((goal_x - pose.position.x), desire, 20000.0, 1.00000001, 0.99)/100.0)
		goal_vec_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.00000001, 0.99)/100.0)
	}
	else{
		desire = 50.0
		goal_vec_x = float(F((goal_x - pose.position.x), desire, 20000.0, 1.00000000001, alpha_repulse)/goal_mod)
		goal_vec_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.00000000001, alpha_repulse)/goal_mod)
	}
	
	if (blue.in())
		goal_vec_x = 2 * goal_vec_x
		goal_vec_y = 2 * goal_vec_y
	#goal_vec_x = 10* 1.01 ^()# * 0.5
	#log("vec x: ", vec.x, "vec y: ", vec.y, ", goal vec x: ", goal_vec_x)
	vec.x = vec.x + goal_vec_x
	#goal_vec_y =  10* 1.01^(goal_y - pose.position.y)# * 0.5
	vec.y = vec.y + goal_vec_y
	
	log("rid: ", id, " vec x: ", vec.x, " vec y: ", vec.y, ", goal vec x: ", goal_vec_x,", goal vec y: ", goal_vec_y)


	vecsum = math.abs(vec.x) + math.abs(vec.y)

	sx = vec.x
	sy = vec.y
	
	#log("sx: ", sx, "sy: ", sy)
	if ((vecsum > base_speed)) {
		sx = (vec.x / vecsum) * base_speed
		sy = (vec.y / vecsum) * base_speed
	}
	

	#move along the vector
	gotoc(sx, sy)
		#scale the vector?
	check_cell_switch()
	#look_at_neighbors(same_neighbors, non_same)

}

function get_nonkin(){
	nearby = near()

	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] != friends[string.tostring(id)] 
	})
}

function get_kin(){
	nearby = near()
	
	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] == friends[string.tostring(id)] 
	})
}

function near(){
	nearby = neighbors.filter(function(rid, data){
		return data.distance < vision})
	return nearby
}

function switch_swarm(){
	if(blue.in()){
		blue.leave()
		green.join()
		neighbors.broadcast(string.tostring(id), GREEN)
		friends[string.tostring(id)] = GREEN
		set_leds(0, 255, 0)
	}
	else if(green.in()){
		green.leave()
		blue.join()
		neighbors.broadcast(string.tostring(id), BLUE)
		friends[string.tostring(id)] = BLUE
		set_leds(0, 0, 255)
	}
	else {
		log("uh oh, spaghettios, :-O")
		set_leds(255, 0, 0)
	}
	
}

function listener(){
	x = 0
	while(x<30) {
		#if (data.distance < vision){
			neighbors.listen(string.tostring(x), function(vid, value, rid){
				friends[string.tostring(rid)] = value
			})
		x = x + 1
		#}
	}
	if (blue.in()) {
		friends[string.tostring(id)] = BLUE
	} 
	else if (green.in()) {
		friends[string.tostring(id)] = GREEN
	} 
	else {
		friends[string.tostring(id)] = 3
	}
	# swtich case?
	neighbors.listen("switch", function(vid, value, rid){
		if (value == id){
			switch_count = switch_count + 2
		}
	})
}

function F(dist, desire, vision, alpha_attract, alpha_repulse) {
	#factor = (4 * e)/dist
	#log("dist: ", dist, " desired: ", desired_dist)
	#first_expo = (desired_dist / dist)^4
	#second_expo = (desired_dist / dist)^2
	#force = factor * (first_expo - second_expo)
	force = 0.0
	band = 2.5
	if (dist < desire - band) {
		force = float((alpha_repulse^((dist - desire))))
		force = float(-2.0*force)
	}
	else if ((dist > desire + band) and (dist < vision)){
		force = float(alpha_attract^((dist - desire)))
		force = float(force)
	}
	else
		force = 0.0
	return force
}


function check_cell_switch() {
	same_neighbors = get_kin()
	non_same = get_nonkin()
	num_same = 0.0
	num_diff = 0.0
	percent_same = 0.0
	same = 0.0
	if (type(same_neighbors) != nil)
		num_same = same_neighbors.count()
	if (type(non_same) != nil)
		num_diff = non_same.count()

	if(num_same == nil){
		num_same = 0.0
	}
	if(same_neighbors == nil){
		same_neighbors = 0.0
	}
	
	sum = float(num_same + num_diff)
	if (sum != 0.0)
		percent_same = float(num_same / sum)
	else{
		percent_same = 0.0
	}
	#debug.print("num same: ", num_same, " num_diff: ", num_diff, " percent_same: ", percent_same, " sum: ", sum)

	if ((percent_same < 0.5) and ((num_same + num_diff) > 5) and (blue.in()))
		switch_count = switch_count + 1
	else{
		switch_count = switch_count - 1
	}
	
	if (switch_count > switch_thresh)
		switch_swarm()
}


function look_at_neighbors(same_neighbors, non_same){
	nearby = near()
	negative = {}
	positive = {}
	sort = {}
	
	if (non_same.count() > 1){
	
		nearby.foreach(function(rid, data){
			if (data.azimuth < 0){
				negative[data.azimuth] = rid
			}
			else{
				positive[data.azimuth] = rid
			}
		})
		i = size(negative)
		foreach(negative, function(azi, rid){
			sort[i] = rid
			i = i - 1
		})
		i = size(negative) + 1
		foreach(positive, function(azi, rid){
			sort[i] = rid 
			i = i + 1
		})	
		
		
		my_swarm = friends[string.tostring(id)]
		last_swarm = friends[sort[(nearby.count() - 1)]] #friends[sort[string.tostring(nearby.count() - 1)]]
		middle_swarm = friends[sort[(nearby.count())]] #friends[sort[string.tostring(nearby.count())]]
		middle_bot = sort[string.tostring(nearby.count() - 1)]
		
		foreach(sort, function(index, rid){
			current_swarm = friends[string.tostring(rid)]
			#log("last swarm was :", last_swarm, " and current swarm is :", current_swarm)
			if ((current_swarm == last_swarm) and (current_swarm == middle_swarm) and (current_swarm != my_swarm)){
				log("switch robot number :", rid)
				neighbors.broadcast("switch", middle_bot)
				middle_bot = rid
			}
			last_swarm = middle_swarm
			middle_swarm = current_swarm
		})
	}
	
}


function calc_happy(vector) {
	happy = math.abs(vector.x) + math.abs(vector.y)

	return happy

	#TODO:get this to work
	same_error = 0.0
	diff_error = 0.0
	same_az = {}
	diff_az = {}

	same_neighbors = get_kin()
	diff_swarm = get_nonkin()
	
	
	if (same_neighbors.count() > 1){
		same_neighbors.foreach(function(rid, data){
			same_az[data.azimuth] = rid	
		})

		last_az = nil
		same_az.foreach(function(az, id){
			if (last_az == nil) {
				last_az = az
			} else {
				offset = calc_offset(az, last_az)
				same_error = same_error + offset
				last_az = az
			}
		})
	}

	

	happy = (same_error + diff_error)

	return happy
}


function calc_angle_offset(azimuth1, azimuth2) {
	offset = azimuth1-azimuth2
	log("here")
	return math.min(math.abs(offset),math.abs(360 - offset))
}
# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
}
