#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

# This function is executed once at init time
function init() {
	#if (id == 0){
	#	log("green when driving")
	#	log("orange when an obstacle is near")
	#	log("red when obstacle is very close")
	#	log("flashes black to flash")
	#}
	
	T = 100
	k = 0.4
	# give a seed or all the robots pick the same random number
	math.rng.setseed(id)
	c = math.rng.uniform(0,100)
	# want to practice swarms
	#flash = swarm.create(1)
	# add everyone to flash if the count is over T
	#flash.select(c >= T)
	# add everyone else to nonflash swarm
	#nonflash = flash.others(2)
	# RGB!!!!
	r = 0
	g = 255
	b = 0
	# no magic numbers
	base_speed = 10.0
	turning_mod = 0.5
	lin_mod = 0.1
	colliding = 0
	vision = 100 #cm
	e = 5000
	desired_dist = 50.0 #cm
	goal_x = 2.5
	goal_y = -2.5
	
	# write things to the robot 
	#set_wheels(base_speed, base_speed)
	#set_leds(r, g, b)
}

# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {

	#filter the neighbors "in view"
	visible = neighbors.filter(function(rid, data) {
		return data.distance < vision})

	vec = {}
	vec.x = 0.0
	vec.y = 0.0
	#calculate the vectors for the attraction/repulsion
	visible.foreach(function(rid, data) {
		x = math.cos(data.azimuth)*F(data.distance)
		y = math.sin(data.azimuth)*F(data.distance)

		vec.x = vec.x + x
		vec.y = vec.y + y
	}) 	
	goal_vec_x = (goal_x - pose.position.x) * 0.01
	log("vec x: ", vec.x, ", goal vec x: ", goal_vec_x)
	vec.x = vec.x + goal_vec_x
	goal_vec_y = (goal_y - pose.position.y) * 0.01
	vec.y = vec.y + goal_vec_y


	vecsum = math.abs(vec.x) + math.abs(vec.y)

	sx = vec.x
	sy = vec.y
	if (vecsum > base_speed) {
		sx = (vec.x / vecsum) * base_speed
		sy = (vec.y / vecsum) * base_speed
	}

	

	#move along the vector
	gotoc(sx, sy)
		#scale the vector?


}

function F(dist) {
	#factor = (4 * e)/dist
	#log("dist: ", dist, " desired: ", desired_dist)
	#first_expo = (desired_dist / dist)^4
	#second_expo = (desired_dist / dist)^2
	#force = factor * (first_expo - second_expo)
	force = 0.0
	if (dist < desired_dist)
		force = -20*((desired_dist/dist)^3)
	else if (dist > desired_dist)
		force = dist/desired_dist
	return force
}

# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
}
