#
# In the ARGoS window, you can move the camera with the following commands:
#
# - Translation: W A S D Q E keys, right-click + drag
# - Rotation: left-click + drag
#
# Selection: shift-click on the robot
# Remove selection: shift-click elsewhere
#
# Bug: selection is finnicky in the top-down view (Camera 1).
# Solution: switch to another camera and it'll work.
#

# This function is executed once at init time
function init() {
	
	GREEN = 1
	BLUE = 0

	HEX = 0
	GRID = 1
	CELL = 2

	# no magic numbers
	base_speed = 7.5
	turning_mod = 0.5
	lin_mod = 0.1
	colliding = 0
	vision = 120.0 #cm
	e = 5000
	goal_x = 2.5
	goal_y = -2.5
	NUM_ROBOTS = 30

	alpha_attract = 1.01
	alpha_repulse = 0.7
	
	count = 0
	goal_mod = 100000000.0
	force_cap = 50000000.0

	#distances
	bb_dist = 30.0
	gg_dist = 40.0 
	bg_dist = 50.0
	gb_dist = 75.0
	
	# write things to the rsobot 
	#set_wheels(base_speed, base_speed)
	#set_leds(r, g, b)

	blue = swarm.create(1) # swarm 0
	green = swarm.create(2) # swarm 1
	aggregation_mod = 1.0
	aggregation_counter = 500

	turn = 0

	same_neighbors = {} # neighbors.kin()
	non_same = {} # neighbors.nonkin()
 	friends = {}
	listener()

	happiness = 100.0
	happy_thresh = 3.0
	position = {
		.0 = pose.position.x,
		.1 = pose.position.y
	}

	angle_offset = 60.0

	type_flock = CELL

	if (type_flock == HEX) {
		init_hex()
	} else if (type_flock == GRID) {
		init_grid()
	} else if (type_flock == CELL) {
		init_cell()
	}
}

function init_hex() {
	bb_dist = 50.0
	gg_dist = 50.0
	bg_dist = 50.0
	gb_dist = 50.0

	switch_count = 0
	switch_thresh = 200

	blue.select(id % 2 == 0)
	green.select(id % 2 == 1)

	aggregation_counter = 200

	if (blue.in()){
		set_leds(0,0,255)
		friends[string.tostring(id)] = BLUE
	}
	else{
		set_leds(0,255,0)
		friends[string.tostring(id)] = GREEN
	}
	log("init hex")

}


function init_grid() {
	bb_dist = 40.0
	gg_dist = 40.0 * math.sqrt(2)
	bg_dist = 40.0 
	gb_dist = 40.0 
	vision = 100 #cm
	switch_rad = 70

	switch_count = 0
	switch_thresh = 200

	aggregation_counter = 1000

	blue.select(id % 2 == 0)
	green.select(id % 2 == 1)
	angle_offset = 90.0

	if (blue.in()){
		set_leds(0,0,255)
		friends[string.tostring(id)] = BLUE
	}
	else{
		set_leds(0,255,0)
		friends[string.tostring(id)] = GREEN
	}
	
	log("init grid")
}

function init_cell() {
	bb_dist = 30.0
	gg_dist = 40.0 
	bg_dist = 50.0
	gb_dist = 75.0
	vision = 120.0 #cm


	switch_count = 0
	switch_thresh = 400
	aggregation_counter = 1000

	blue.select(id % 2 == 0)
	green.select(id % 2 == 1)

	if (blue.in()){
		set_leds(0,0,255)
		friends[string.tostring(id)] = BLUE
	}
	else{
		set_leds(0,255,0)
		friends[string.tostring(id)] = GREEN
	}

	
	log("init cell")

}
# This function is executed at each time step
# The main loop is controller by ARGoS
function step() {
	if (count > aggregation_counter){
		goal_x = -3.0
		goal_y = 3.0
	}
	same_neighbors = get_kin() # neighbors.kin()
	non_same = get_nonkin() # neighbors.nonkin()
	#log(non_same)	
	count = count + 1
		
	green.exec(function(){
		neighbors.broadcast(string.tostring(id),  GREEN)})
	blue.exec(function(){
		neighbors.broadcast(string.tostring(id),  BLUE)})

	vec = {}
	vec.x = 0.0
	vec.y = 0.0

	if (type_flock == GRID){
		debug.print(switch_count)
		if(switch_count > switch_thresh){
			switch_swarm()
			switch_count = 0
		}
		else if (switch_count > 0){
			switch_count = switch_count - 1 
		}
	}


	diff_dist = bg_dist
	if (green.in())
		diff_dist = gb_dist

	#######################calculate the vectors for the attraction/repulsion######################################
	non_same.foreach(function(rid,data) {
		#log(neighbors.poses[rid])
		x = math.cos(data.azimuth)*F(data.distance, diff_dist, vision, alpha_attract, alpha_repulse)
		y = math.sin(data.azimuth)*F(data.distance, diff_dist, vision, alpha_attract, alpha_repulse)

		vec.x = vec.x + x
		vec.y = vec.y + y
	})
	
	same_dist = bb_dist
	if (green.in())
		same_dist = gg_dist

	same_neighbors.foreach(function(rid,data) {

		if ( type_flock == CELL) {
			if (blue.in()){
				x = math.cos(data.azimuth)*F(data.distance, same_dist, vision, 1.1, alpha_repulse)
				y = math.sin(data.azimuth)*F(data.distance, same_dist, vision, 1.1, alpha_repulse)
			}
			else{
				x = math.cos(data.azimuth)*F(data.distance, same_dist, vision, 1.0001, alpha_repulse)
				y = math.sin(data.azimuth)*F(data.distance, same_dist, vision, 1.0001, alpha_repulse)
			}
		} else {
			x = math.cos(data.azimuth)*F(data.distance, same_dist, vision, alpha_attract, alpha_repulse)
			y = math.sin(data.azimuth)*F(data.distance, same_dist, vision, alpha_attract, alpha_repulse)
		}

		vec.x = vec.x + x
		vec.y = vec.y + y
	})

################################# HAPPINESS ##################################################################

	happiness = calc_happy(vec) #math.abs(vec.x) + math.abs(vec.y)
	#calc_happy(vec)#, same_neighbors, non_same)

	if (happiness < happy_thresh) {
		debug.print(":-D")
	}
	else {
		debug.print(":-(")
	}
	#debug.print(happiness)

	position = {
		.0 = pose.position.x,
		.1 = pose.position.y
	}
	#debug.print(happiness)

 ###################################### GOAL ATTRACTION #####################################################
	if (type_flock == CELL) {
		
			the_yaw = (3.14159 ) - float(pose.orientation["yaw"]) 
			b = 100.0

			tx = goal_x*b - pose.position.x*b
			ty = goal_y*b - pose.position.y*b
			d = math.sqrt((tx)^2 + (ty)^2)
			ang = math.asin(ty/d)
			rotate = ang - the_yaw #+ angle #calc_angle_offset(angle, the_yaw)# the_yaw - angle

		if (count < aggregation_counter ) {
			desire = 0.0
			the_yaw = (3.14159 ) - float(pose.orientation["yaw"]) 
			if (green.in()){
				vec.x = vec.x *2.0
				vec.y = vec.y *2.0
				desire = 5.0 + ((count%100)/10)
				f = float(F(d, desire, 20000.0, 1.001, 0.99999999))
			}
			else{
				vec.x = vec.x / 2.0
				vec.y = vec.y / 2.0
				desire = 3.0
				f = float(F(d, desire, 20000.0, 1.001, 0.9999999999))
			}
		}
		else {
			f = float(F(d, desire, 20000.0, 1.1, alpha_repulse))
			if(green.in()){
				vec.x = vec.x/7.5
				vec.y = vec.y/7.5
			}
			else{
				vec.x = vec.x/150.0
				vec.y = vec.y/150.0
			}
		}

		goal_vec_x = base_speed * 0.75 *(f / force_cap)
		goal_vec_y = the_yaw-ang * (f / force_cap)	

		#vec.x = 0.0#goal_vec_x
		#vec.y = 0.0#goal_vec_y
			
	}
	################################# GRID GOAL VEC #############################################################
	else if(type_flock == GRID){
		# pre flock
		if (count < aggregation_counter) {
			desire = 2.5
			goal_vec_x = float(F((goal_x - pose.position.x), desire, 20000.0, 1.1, alpha_repulse)/100000000.0)
			goal_vec_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse)/100000000.0)
		
		}
		else {
		# flock time 
			the_yaw = (3.14159 ) - float(pose.orientation["yaw"]) 
			b = 100.0

			tx = goal_x*b - pose.position.x*b
			ty = goal_y*b - pose.position.y*b
			d = math.sqrt((tx)^2 + (ty)^2)
			ang = math.asin(ty/d)
			rotate = ang - the_yaw #+ angle #calc_angle_offset(angle, the_yaw)# the_yaw - angle
			
			#goal_vec_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse)/goal_mod)
			#temp_x = float(F((goal_x - pose.position.x), desire, 20000.0, 1.1, alpha_repulse))*math.sin(float(pose.orientation["yaw"]))
			#temp_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse))*math.cos(float(pose.orientation["yaw"]))
			f = float(F(d, desire, 20000.0, 1.1, alpha_repulse))

			goal_vec_x = base_speed * 0.5 * (f / force_cap)
			goal_vec_y = the_yaw-ang  * (f / force_cap)

			if ((id == "4") or (id == 4)) {
				log("yaw: ", pose.orientation["yaw"], " angle: ", ang, "add: ", ang-the_yaw, " goal_vec_y: ", goal_vec_y, ", goal vec x: ", goal_vec_x)
			}
		}
	}
	else {
		desire = 0.0
		
	
		#* base_speed
		#goal_vec_x = (math.cos(a) * base_speed) #temp_x) - (math.sin(a) * temp_y)
		#goal_vec_y = (math.sin(a) * base_speed) #temp_x) + (math.cos(a) * temp_y) 

		#goal_vec_x = f#goal_vec_x * 10.0
		#goal_vec_y = rot * 10.0#goal_vec_y

		if (count < aggregation_counter){

			goal_vec_x = 1.01^(goal_x - pose.position.x)# float(F((goal_x - pose.position.x), desire, 20000.0, 1.1, alpha_repulse)/100000000.0)
			goal_vec_y = 1.01^(goal_y - pose.position.y) #float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse)/100000000.0)

		} else {

			the_yaw = (3.14159 ) - float(pose.orientation["yaw"]) 
			goal_x = 0.0
			goal_y = 0.0

			b = 100.0

			tx = goal_x*b - pose.position.x*b
			ty = goal_y*b - pose.position.y*b
			d = math.sqrt((tx)^2 + (ty)^2)
			ang = math.asin(ty/d)
			rotate = ang - the_yaw #+ angle #calc_angle_offset(angle, the_yaw)# the_yaw - angle
			
			#goal_vec_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse)/goal_mod)
			#temp_x = float(F((goal_x - pose.position.x), desire, 20000.0, 1.1, alpha_repulse))*math.sin(float(pose.orientation["yaw"]))
			#temp_y = float(F((goal_y - pose.position.y), desire, 20000.0, 1.1, alpha_repulse))*math.cos(float(pose.orientation["yaw"]))
			f = float(F(d, desire, 20000.0, 1.1, alpha_repulse))

			goal_vec_x = base_speed * 0.5 * (f / force_cap)
			goal_vec_y = the_yaw-ang  * (f / force_cap)

			if ((id == "4") or (id == 4)) {
				log("yaw: ", pose.orientation["yaw"], " angle: ", ang, "add: ", ang-the_yaw, " goal_vec_y: ", goal_vec_y, ", goal vec x: ", goal_vec_x)
			}
		}
					
	}


	if (count >= 1){# aggregation_counter){

		vec.x = vec.x *2.0
		vec.y = vec.y *2.0

		if (blue.in()) {
			vec.x = vec.x / 2.0
			vec.y = vec.y / 2.0
		}

	}


	vec.x = vec.x + goal_vec_x
	vec.y = vec.y + goal_vec_y

	if ((id == "13") or (id == 13)) {
		log("yaw: ", pose.orientation["yaw"], " angle: ", ang, ", goal vec x: ", goal_vec_x, " goal_vec_y: ", goal_vec_y, " x: ", vec.x, " y: ", vec.y)
	}

	vecsum = math.abs(vec.x) + math.abs(vec.y)

	sx = vec.x
	sy = vec.y
	
	#log("sx: ", sx, "sy: ", sy)

	###################################### GET THE VECTORS ##############################################3
	
	if ((vecsum > base_speed)) {
		sx = (vec.x / vecsum) * base_speed#(base_speed / base_speed_mod)
		sy = (vec.y / vecsum) * base_speed#(base_speed / base_speed_mod)
	}
	
	#sx = sx + goal_vec_x
	#sy = sy + goal_vec_y
	if((type_flock == CELL) and (blue.in())){
		sx = 1.0*sx
		sy = 1.0*sy
	}


	#move along the vector
	gotoc(sx, sy)
		#scale the vector?

	check_switch()
	debug.print(switch_count)

}

function calc_goal_angle(){
	angle = 0.0
	foreach(light, function(key,value){
		if ((key != "0") and (key != "7")) {
			#log("key: ", key, "angle: ", value.angle, " val: ", value.value)
			if (value.value > 0.0) {
				
				angle = angle + (value.angle) #* (value.value)
			}
		}
	})
	#log()
	return angle
}

function get_nonkin(){
	nearby = near()
	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] != friends[string.tostring(id)] 
	})
}

function get_kin(){
	nearby = near()
	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] == friends[string.tostring(id)] 
	})
}

function near(){
	nearby = neighbors.filter(function(rid, data){
		return data.distance < vision})
	return nearby
}

function near_rad(radius){
	near_bots = neighbors.filter(function(rid, data){
		return data.distance < radius})
	return near_bots
}

function get_nonkin_rad(radius){
	nearby = near_rad(radius)
	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] != friends[string.tostring(id)] 
	})
}

function get_kin_rad(radius){
	nearby = near_rad(radius)
	return nearby.filter(function(rid, data){
		return friends[string.tostring(rid)] == friends[string.tostring(id)] 
	})
}

function switch_swarm(){
	if(blue.in()){
		blue.leave()
		green.join()
		neighbors.broadcast(string.tostring(id), GREEN)
		friends[string.tostring(id)] = GREEN
		set_leds(0, 255, 0)
	}
	else if(green.in()){
		green.leave()
		blue.join()
		neighbors.broadcast(string.tostring(id), BLUE)
		friends[string.tostring(id)] = BLUE
		set_leds(0, 0, 255)
	}
	else {
		log("uh oh, spaghettios, :-O")
		set_leds(255, 0, 0)
	}
	
}

function listener(){
	x = 0
	while(x<30) {
		#if (data.distance < vision){
			neighbors.listen(string.tostring(x), function(vid, value, rid){
				friends[string.tostring(rid)] = value
			})
		x = x + 1
		#}
	}
	if (blue.in()) {
		friends[string.tostring(id)] = BLUE
	} 
	else if (green.in()) {
		friends[string.tostring(id)] = GREEN
	} 
	else {
		friends[string.tostring(id)] = 3
	}
	# swtich case?
	neighbors.listen("switch", function(vid, value, rid){
		if (value == id){
			switch_count = switch_count + 2
		}
	})
}

function F(dist, desire, vision, alpha_attract, alpha_repulse) {
	#factor = (4 * e)/dist
	#log("dist: ", dist, " desired: ", desired_dist)
	#first_expo = (desired_dist / dist)^4
	#second_expo = (desired_dist / dist)^2
	#force = factor * (first_expo - second_expo)
	force = 0.0
	band = 2.5
	if (dist < desire - band) {
		force = float((alpha_repulse^((dist - desire))))
		force = float(-2.0*force)
	}
	else if ((dist > desire + band) and (dist < vision)){
		force = float(alpha_attract^((dist - desire)))
		force = float(force)
	}
	else
		force = 0.0

	if (force > force_cap) {
		force = force_cap
	} else if (force < (-1.0 * force_cap)) {
		force = force_cap * -1.0
	}

	
	return force
}


function check_cell_switch() {
	same_neighbors = get_kin()
	non_same = get_nonkin()
	num_same = 0.0
	num_diff = 0.0
	percent_same = 0.0
	same = 0.0
	
	if (type(same_neighbors) != nil)
		num_same = same_neighbors.count()
	if (type(non_same) != nil)
		num_diff = non_same.count()

	if(num_same == nil){
		num_same = 0.0
	}
	if(same_neighbors == nil){
		same_neighbors = 0.0
	}
	
	sum = float(num_same + num_diff)
	if (sum != 0.0)
		percent_same = float(num_same / sum)
	else{
		percent_same = 0.0
	}
	#debug.print("num same: ", num_same, " num_diff: ", num_diff, " percent_same: ", percent_same, " sum: ", sum)

	if ((percent_same < 0.1) and (blue.in()))
		switch_count = switch_count + 1
	else if (switch_count > 0){
		switch_count = switch_count - 1
	}
	
	if (switch_count > switch_thresh)
		switch_swarm()
}

function check_grid_switch() {
	
	same_neighbors = get_kin_rad(switch_rad)
	non_same = get_nonkin_rad(switch_rad)
	
	nearby = near_rad(switch_rad)
	negative = {}
	positive = {}
	sort = {}
	debug_sort = {}
	
	if (non_same.count() > 1){
	
		nearby.foreach(function(rid, data){
			if (data.azimuth < 0){
				negative[data.azimuth] = rid
			}
			else{
				positive[data.azimuth] = rid
			}
		})
		i = size(negative)-1
		foreach(negative, function(azi, rid){
			sort[i] = rid
			debug_sort[i] = azi
			if(debug_sort[i] > debug_sort[i+1]){
				#log("Sort did not work right")
				sort[i] = sort[i+1]
				debug_sort[i] = debug_sort[i+1]
				sort[i+1] = rid
				debug_sort[i+1] = azi
			}
			i = i - 1
		})

		foreach(sort, function(key, value){
			if ((value > sort[key+1]) and (sort[key+1] != nil)){
				sort[key] = sort[key+1]
				azi = debug_sort[key]
				debug_sort[key] = debug_sort[key+1]
				sort[key+1] = value
				debug_sort[key+1] = azi
			}
		})
	
		i = size(negative) + 1
		foreach(positive, function(azi, rid){
			sort[i] = rid 
			debug_sort[i] = azi
			if(debug_sort[i-1] > debug_sort[i]){
				#log("Sort did not work right")
				sort[i] = sort[i-1]
				debug_sort[i] = debug_sort[i-1]
				sort[i-1] = rid
				debug_sort[i-1] = azi
			}
			i = i + 1
		})	
		

		num_nearby = 	nearby.count()
		same_nearby = same_neighbors.count()
		#if (same_nearby == null){
		#	same_nearby = 0
		#}
		#if (num_nearby == null){
		#	num_nearby = 0
		#}
		# log("robot num: ", id)
		# log("same neighbors: ", same_nearby)
		# log("nearby neighbors: ", num_nearby)
		
		if (same_neighbors.count() == nearby.count()){
			switch_count = switch_count + 2
		}
		
		#log("here")
		my_swarm = friends[string.tostring(id)]
		last_swarm = friends[string.tostring(sort[string.tostring(nearby.count()-1)])]
		middle_key = string.tostring(nearby.count())
		middle_swarm = friends[string.tostring(sort[string.tostring(nearby.count())])]

		middle_bot = sort[string.tostring(nearby.count())]
		
		foreach(sort, function(index, rid){
			current_swarm = friends[string.tostring(rid)]
			#log("last swarm was :", last_swarm, " and current swarm is :", current_swarm)
			if ((current_swarm == last_swarm) and (current_swarm == middle_swarm)){ # and (current_swarm != my_swarm)){
				# log("switch robot number :", rid)
				neighbors.broadcast("switch", middle_bot)
			}
			#if ((current_swarm == middle_swarm) and (current_swarm == my_swarm) and (math.abs(debug_sort[index] - debug_sort[middle_key]) <= math.pi/6)){ 
			#	neighbors.broadcast("switch", middle_bot)
			#}
			last_swarm = middle_swarm
			middle_swarm = current_swarm
			middle_bot = rid
			middle_key = index
		})
	}
}



function check_switch(){
	if (type_flock == GRID) {
		check_grid_switch()
	} else if (type_flock == CELL){
		check_cell_switch()
	}
}


function calc_happy(vector) {
	happy = math.abs(vector.x) + math.abs(vector.y)

	return happy

	#TODO:get this to work
	same_error = 0.0
	diff_error = 0.0
	same_az = {}
	diff_az = {}

	same_neighbors = get_kin()
	diff_swarm = get_nonkin()
	
	
	if (same_neighbors.count() > 1){
		same_neighbors.foreach(function(rid, data){
			same_az[data.azimuth] = rid	
		})

		last_az = nil
		same_az.foreach(function(az, id){
			if (last_az == nil) {
				last_az = az
			} else {
				offset = calc_offset(az, last_az)
				same_error = same_error + offset
				last_az = az
			}
		})
	}

	

	happy = (same_error + diff_error)

	return happy
}


function calc_angle_offset(azimuth1, azimuth2) {
	offset = azimuth1-azimuth2
	if (offset >= 3.14159) {
		return offset - 3.14159
	} else  if (offset <= -3.14159){
		return  math.abs(math.max(offset,offset + 3.1519))
	}
	return offset
	#log("here")
	
}
# This function is executed when you press the reset button
function reset() {
}

# This function is executed once when you close the simulator
function destroy() {
}
